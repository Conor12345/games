from pygame_functions import *
from math import sin, cos, pi

setAutoUpdate(False)

screenWidth = 1800
screenHeight = 1000

class Car:
    def __init__(self):
        self.xpos = 100 #cos
        self.ypos = 100
        self.direction = 180 #0 - 360
        self.speed = 0
        self.sprite = makeSprite("car.png")
        showSprite(self.sprite)
        self.update()

    def update(self):
        if keyPressed("w"):
            self.speed += 1
        if keyPressed("s"):
            self.speed -= 1
        if keyPressed("d"):
            self.direction += 3
        if keyPressed("a"):
            self.direction -= 3
        if keyPressed("q"):
            self.speed = 0

        if self.speed > 10:
            self.speed = 10
        elif self.speed < -10:
            self.speed = -10
	else:
	    self.speed = 0

        if self.speed > 0:
            self.speed -= 0.1
        elif self.speed < 0:
            self.speed += 0.1

        if self.direction > 360:
            self.direction = self.direction - 360
        elif self.direction < 0:
            self.direction = 360 + self.direction

        if self.direction < 90:
            self.xpos -= cos(self.direction * (math.pi / 180)) * self.speed
            self.ypos -= sin(self.direction * (math.pi / 180)) * self.speed
        elif self.direction == 90:
            self.ypos -= self.speed

        elif self.direction < 180:
            self.xpos += cos((180 - self.direction) * (math.pi / 180)) * self.speed
            self.ypos -= sin((180 - self.direction) * (math.pi / 180)) * self.speed
        elif self.direction == 180:
            self.xpos += self.speed

        elif self.direction < 270:
            self.xpos += cos((self.direction - 180) * (math.pi / 180)) * self.speed
            self.ypos += sin((self.direction - 180) * (math.pi / 180)) * self.speed
        elif self.direction == 270:
            self.ypos += self.speed

        elif self.direction < 360:
            self.xpos -= cos((360 - self.direction) * (math.pi / 180)) * self.speed
            self.ypos += sin((360 - self.direction) * (math.pi / 180)) * self.speed
        elif self.direction == 360:
            self.xpos += self.speed

        if self.xpos > screenWidth + 100:
            self.xpos -= screenWidth + 200
        elif self.xpos < -100:
            self.xpos += screenWidth + 200

        if self.ypos > screenHeight + 100:
            self.ypos -= screenHeight + 200
        elif self.ypos < -100:
            self.ypos += screenHeight + 200

        moveSprite(self.sprite, self.xpos, self.ypos,True)
        transformSprite(self.sprite, self.direction, 0.5)

class Wall:
    def __init__(self, xpos, ypos, rotation):
        self.xpos = xpos
        self.ypos = ypos
        self.rotation = rotation
        self.sprite = makeSprite("barrier.png")
        showSprite(self.sprite)
        moveSprite(self.sprite, xpos, ypos, True)
        transformSprite(self.sprite, self.rotation, 1)

screenSize(screenWidth,screenHeight)

while True:
    C = Car()

    walls = []
    clicked = False
    playing = True

    for xpos in range(0, screenWidth + 50, 50):
        walls.append(Wall(xpos, 0, 0))
        walls.append(Wall(xpos, screenHeight, 0))

    for ypos in range(0, screenHeight + 50, 50):
        walls.append(Wall(0, ypos, 0))
        walls.append(Wall(screenWidth, ypos, 0))

    while playing:
        C.update()

        if mousePressed() and not clicked:
            walls.append(Wall(mouseX(), mouseY(), 0))
            clicked = True
        elif not mousePressed():
            clicked = False

        for wall in walls:
            if touching(C.sprite, wall.sprite):
                playing = False
                break

        updateDisplay()
        tick(60)

    hideSprite(C.sprite)
    for wall in walls:
        hideSprite(wall.sprite)
